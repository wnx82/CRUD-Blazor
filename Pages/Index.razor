@page "/"
@inject StateContainer StateContainer
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


<PageTitle>Index</PageTitle>

<h1>Employés</h1>
    <EditForm Model="@Employe" OnValidSubmit="@(selected is null ? (Func<Task>)AddEmploye : UpdateEmploye)">
        <DataAnnotationsValidator />
        <Field>

            <div class="form-group">
                <label for="id">Nom</label>
                <div class="col-sm-10">
                    <InputText id="nom" type="text" class="form-control" placeholder="Obligatoire" @bind-Value="Employe.Nom" autofocus />
                    <ValidationMessage For="@(() => employe.Nom)" />
                </div>
            </div>
            <div class="form-group">
                <label for="nom">Prenom</label>
                <div class="col-sm-10">
                <InputText id="Prenom" type="text" class="form-control" placeholder="Obligatoire" @bind-Value="Employe.Prenom" />
                    <ValidationMessage For="@(() => employe.Prenom)" />
                </div>
            </div>
 
        </Field>
        <div>
            @if (rue.CreatedAt is not null)
        {
            <p>Créé : @rue.CreatedAt</p>
            <p>Modifié : @rue.UpdatedAt</p>
        }
        @if (rue.DeletedAt is not null)
        {
            <p>Effacé : @rue.DeletedAt</p>
        }
                </div>
                <button type="submit" class="btn btn-primary mt-2"><i class="oi oi-check"></i> @((selected is null) ? "Ajouter" : "Update")</button>
            </EditForm>



@code {
    Employe employe = new Employe();
    private Rue? selected = null;

    [Parameter]
    public Action? OnRueSelected { get; set; }

    private Action? OnRueUpdated;

    private string CpString
    {
        get => rue.Cp?.ToString() ?? string.Empty;
        set
        {
            if (int.TryParse(value, out int result))
            {
                rue.Cp = result;
            }
            else
            {
                rue.Cp = null;
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        this.OnRueUpdated = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };
        this.OnRueSelected = async () =>
        {
            await InvokeAsync(StateHasChanged);
        };

        StateContainer.OnRueUpdated += this.OnRueUpdated;
        StateContainer.OnRueSelected += this.OnRueSelected;
        await GetRues();
    }

    private bool isLoading = true;

    //système de pagination
    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private int currentPageAsInt = 1;
    private const int PageSize = 10;

    private bool IsActive(string page)
        => currentPageAsInt.ToString() == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPageAsInt == 1;
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPageAsInt == (int)Math.Ceiling((double)StateContainer.Rues.Count / PageSize);
        }
        return false;
    }

    private void Previous()
    {
        if (currentPageAsInt > 1)
        {
            currentPageAsInt -= 1;
        }
    }

    private void Next()
    {
        if (currentPageAsInt < (int)Math.Ceiling((double)StateContainer.Rues.Count / PageSize))
        {
            currentPageAsInt += 1;
        }
    }

    private void SetActive(string page)
        => currentPageAsInt = int.Parse(page);


    // Récupérer les rues
    public async Task GetRues()
    {
        isLoading = true; // Activer le loader

        var request = new HttpRequestMessage(HttpMethod.Get, $"{NavigationManager.BaseUri}api/rue/getall");

        using (var response = await HttpClient.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                var rues = await response.Content.ReadFromJsonAsync<List<Rue>>();

                if (rues != null)
                {
                    StateContainer.Rues = rues;
                    await InvokeAsync(StateHasChanged);
                }
            }
        }

        isLoading = false; // Désactiver le loader
    }


    private void NewRue()
    {
        Reset();
    }

    // Ajouter une rue
    private async Task AddRue()
    {
        var newRue = new Rue
            {
                Id = Guid.NewGuid(),
                Nom = rue.Nom,
                Denomination = rue.Denomination,
                NomComplet = rue.NomComplet,
                Quartier = rue.Quartier,
                Cp = rue.Cp,
                Localite = rue.Localite,
                CodeRue = rue.CodeRue,
                TraductionNL = rue.TraductionNL,
                CreatedAt = DateTime.Now,
                UpdatedAt = DateTime.Now,
            };

        var content = JsonContent.Create(newRue);

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/rue/add");
        requestMsg.Content = content;
        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                StateContainer.Rues?.Add(newRue);
                Reset();
                await HideModal();
                ToastService.ShowSuccess("Rue ajoutée!");

            }
            else
            {
                ToastService.ShowError("Une erreur s'est produite.");
            }
        }
    }

    // Mettre à jour une rue
    private async Task UpdateRue()
    {
        if (selected is null)
        {
            return;
        }

        var rueUpdate = new Rue
            {
                Id = this.selected.Id,
                Denomination = rue.Denomination,
                Nom = rue.Nom,
                NomComplet = rue.NomComplet,
                Quartier = rue.Quartier,
                Cp = rue.Cp,
                Localite = rue.Localite,
                CodeRue = rue.CodeRue,
                TraductionNL = rue.TraductionNL,
                CreatedAt = rue.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = rue.DeletedAt,
            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/rue/update");
        requestMsg.Content = JsonContent.Create(rueUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Rues.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Rues[index] = rueUpdate;
                    UnSelectRue();
                    ToastService.ShowSuccess("Rue mise à jour!");
                    await HideModal();

                }
            }
        }
    }

    // RESET
    private void Reset()
    {
        rue = new Rue();
        selected = null;
        ShowModal();
    }

    // Delete Rue
    private async Task DeleteRue()
    {
        if (selected is null)
        {
            return;
        }

        var rueUpdate = new Rue
            {

                Id = this.selected.Id,
                Denomination = rue.Denomination,
                Nom = rue.Nom,
                NomComplet = rue.NomComplet,
                Quartier = rue.Quartier,
                Cp = rue.Cp,
                Localite = rue.Localite,
                CodeRue = rue.CodeRue,
                TraductionNL = rue.TraductionNL,
                CreatedAt = rue.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = DateTime.Now,

            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/rue/update");
        requestMsg.Content = JsonContent.Create(rueUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Rues.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Rues[index] = rueUpdate;
                    UnSelectRue();
                    await HideModal();
                    ToastService.ShowWarning("Rue effacée");
                }
            }
        }
    }

    // Restaurer une Rue
    private async Task RestoreDeletedRue()
    {
        if (selected is null)
        {
            return;
        }

        var rueUpdate = new Rue
            {

                Id = this.selected.Id,
                Denomination = rue.Denomination,
                Nom = rue.Nom,
                NomComplet = rue.NomComplet,
                Quartier = rue.Quartier,
                Cp = rue.Cp,
                Localite = rue.Localite,
                CodeRue = rue.CodeRue,
                TraductionNL = rue.TraductionNL,
                CreatedAt = rue.CreatedAt,
                UpdatedAt = DateTime.Now,
                DeletedAt = null,

            };

        var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/rue/update");
        requestMsg.Content = JsonContent.Create(rueUpdate);

        using (var msg = await HttpClient.SendAsync(requestMsg))
        {
            if (msg.IsSuccessStatusCode)
            {
                var index = StateContainer.Rues.IndexOf(selected);
                if (index != -1)
                {
                    StateContainer.Rues[index] = rueUpdate;
                    UnSelectRue();
                    await HideModal();
                    ToastService.ShowInfo("Rue Restaurée");
                }
            }
        }
    }

    // Effacer une Rue
    private async Task DeleteCompleteRue()
    {
        if (selected is null)
        {
            return;
        }

        bool confirmed = await ConfirmDelete();

        if (!confirmed)
        {
            return;
        }

        try
        {
            var requestMsg = new HttpRequestMessage(HttpMethod.Post, $"{NavigationManager.BaseUri}api/rue/delete");
            requestMsg.Content = JsonContent.Create(selected);

            using (var msg = await HttpClient.SendAsync(requestMsg))
            {
                if (msg.IsSuccessStatusCode)
                {
                    StateContainer.Rues.Remove(selected);
                    UnSelectRue();
                    await HideModal();
                    ToastService.ShowWarning("Rue complètement effacée");
                }
                else
                {
                    string errorMessage = await msg.Content.ReadAsStringAsync();
                    await HideModal();
                    ToastService.ShowError(errorMessage);
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Une erreur s'est produite lors de la suppression de la rue.");
            Console.WriteLine(ex);
        }
    }

    // Selectionner une rue
    private void SelectRue(Rue art)
    {

        StateContainer.SelectedRue = art;
        selected = art;
        rue = art;
        InvokeAsync(StateHasChanged);

    }

    // Déselectionner une rue
    private void UnSelectRue()
    {
        selected = null;
        Reset();
    }

    // Mettre en évidence la ligne sélectionnée
    private string GetRowStyle(Rue rue)
    {
        return selected == rue ? "box-shadow: 0 0 5px rgba(0, 0, 0, 0.3); border: 1px solid #333; color: white; background-color: #337ab7;" : string.Empty;
    }

    // Confirmation d'effacement
    async Task<bool> ConfirmDelete()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer définitivement cette rue ??");
        return confirmed;
    }


    // Référence au Modal d'ajout d'Rue
    private Modal? modalAjoutRue;

    // Montrer la modal
    private Task ShowModal()
    {
        return modalAjoutRue?.Show() ?? Task.CompletedTask;
    }

    // Cacher la modal
    private Task HideModal()
    {
        return modalAjoutRue?.Hide() ?? Task.CompletedTask;
    }

    // Nettoyage et libération des ressources
    public void Dispose()
    {
        StateContainer.OnRueUpdated -= this.OnRueUpdated;
        StateContainer.OnRueSelected -= this.OnRueSelected;
    }
}